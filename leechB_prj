#!/usr/bin/env python
# -*- coding: utf-8 *-*
# leechB_prj

from optparse import OptionParser
import sys
from src import prj_cfg_mng


MSG_USAGE = "\nEXAMPLE:\n\
            leechB_prj -P prj_name -c -S /home/lucifer -D /backup\n\
            leechB_prj -P prj_name -e [-S /home/lucifer] [-D /var/backup]\n\
            leechB_prj -P prj_name -d\n\
            leechB_prj -P prj_name -r\n\
            leechB_prj -l"

leechB_prj_cmd = OptionParser(MSG_USAGE)

leechB_prj_cmd.add_option('-P', '--project', action='store', dest='project', help='input project name')
leechB_prj_cmd.add_option('-c', '--create', action='store_true', help='create')
leechB_prj_cmd.add_option('-e', '--edit', action='store_true', help='edit')
leechB_prj_cmd.add_option('-d', '--delete', action='store_true', help='delete')
leechB_prj_cmd.add_option('-r', '--read', action='store_true', help='read')
leechB_prj_cmd.add_option('-l', '--prjlist', action='store_true', help='list')
leechB_prj_cmd.add_option('-S', '--source', action='store', dest='source', help='project source')
leechB_prj_cmd.add_option('-D', '--destination', action='store', dest='destination', help='project destination')

(input_opts, args) = leechB_prj_cmd.parse_args(sys.argv[1:])
prj_instance = prj_cfg_mng.prj_cfg()

rul_list = input_opts.prjlist \
            and not input_opts.project \
            and not input_opts.create \
            and not input_opts.edit \
            and not input_opts.delete \
            and not input_opts.read \
            and not input_opts.source \
            and not input_opts.destination

rul_create = (input_opts.project and input_opts.create) and (input_opts.source and input_opts.destination) \
            and not input_opts.edit \
            and not input_opts.delete \
            and not input_opts.read \
            and not input_opts.prjlist

rul_edit = (input_opts.project and input_opts.edit) and (input_opts.source or input_opts.destination) \
            and not input_opts.create \
            and not input_opts.delete \
            and not input_opts.read \
            and not input_opts.prjlist

rul_delete = input_opts.project and input_opts.delete \
            and not input_opts.create \
            and not input_opts.edit \
            and not input_opts.read \
            and not input_opts.prjlist \
            and not input_opts.source \
            and not input_opts.destination

rul_read = input_opts.project and input_opts.read \
            and not input_opts.create \
            and not input_opts.edit \
            and not input_opts.delete \
            and not input_opts.prjlist \
            and not input_opts.source \
            and not input_opts.destination

# prj list
if rul_list:
    projects = prj_instance.prjcfg_list()
    print "==========projects list=========="
    for prj in projects:
        print prj

# prj create
elif rul_create:
    if prj_instance.prjcfg_create(input_opts.project):
        print "Project %s is Created" % input_opts.project
        result = prj_instance.prjcfg_edit(input_opts.project, [('prj_src',input_opts.source), ('prj_dst',input_opts.destination)])
        for item in result:
            print "%s: %s" % (item[0], item[1])
    else:
        print "Project %s exist" % input_opts.project

# prj edit
elif rul_edit:
        result = prj_instance.prjcfg_edit(input_opts.project, [('prj_src',input_opts.source), ('prj_dst',input_opts.destination)])
        if result:
            for item in result:
                print "%s: %s" % (item[0], item[1])
        else:
            print "Project %s is not exist" % input_opts.project

#prj delete
elif rul_delete:
    if prj_instance.prjcfg_delete(input_opts.project):
        print "Project %s is Deleted" % input_opts.project
    else:
        print "Project %s is Not Exist" % input_opts.project

# prj read
elif rul_read:
    result = prj_instance.prjcfg_read(input_opts.project)
    if result:
        print "%s: %s" % (result[0][0], result[0][1])
        print "%s: %s" % (result[1][0], result[1][1])
    else:
        print "No such section"

# cmd wrong
else:
    leechB_prj_cmd.error('Wrong way to use, pls get help from "-h"')

